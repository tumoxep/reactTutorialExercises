{"version":3,"sources":["store/reducers/history.js","store/reducers/index.js","store/actionTypes.js","store/index.js","utils.js","game.js","store/actions.js","index.js"],"names":["initialState","squares","Array","fill","combineReducers","history","state","action","type","slice","payload","stepNumber","concat","item","createStore","rootReducer","calculateWinner","lines","i","length","a","b","c","coords","Math","floor","Square","props","classes","isWinner","className","onClick","value","Board","key","this","rows","row","j","push","renderSquare","renderCells","React","Component","Game","xIsNext","reverseOrder","setState","addToHistory","step","status","current","winner","moves","map","move","desc","jumpTo","reverse","forEach","el","includes","handleClick","toggleOrder","connect","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.5bcf2657.chunk.js","sourcesContent":["import { ADD_TO_HISTORY } from \"../actionTypes\";\n\nconst initialState = [{\n  squares: Array(9).fill(null),\n}];\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case ADD_TO_HISTORY: {\n      return state.slice(0, action.payload.stepNumber + 1).concat([ action.payload.item ]);\n    }\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport history from './history';\n\nexport default combineReducers({ history });\n","export const ADD_TO_HISTORY = \"ADD_TO_HISTORY\";\n","import { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nexport default createStore(rootReducer);","export function calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return lines[i];\n    }\n  }\n  return null;\n}\n\n/* col,row */\nexport function coords(i) {\n  return `${i % 3},${Math.floor(i / 3)}`;\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport { calculateWinner, coords } from './utils';\nimport { addToHistory } from './store/actions';\n\nfunction Square(props) {\n  const classes = `square ${props.isWinner ? 'winner' : ''}`\n  return (\n    <button className={classes} onClick={props.onClick}>\n      {props.value}\n    </button>  \n  );\n}\n\nclass Board extends React.Component {    \n  renderSquare(i) {\n    return (\n      <Square\n        key={i}\n        value={this.props.squares[i]}\n        isWinner={this.props.isWinner[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  renderCells() {\n    const rows = [];\n    for (let i = 0; i < 3; i++) {\n      const row = [];\n      for (let j = 0; j < 3; j++) {\n        row.push(this.renderSquare(j + 3 * i));\n      }\n      rows.push(\n        <div key={i} className=\"board-row\">\n          {row}\n        </div>\n      );\n    }\n    return rows;\n  }\n  \n  render() {\n    return (\n      <div>\n        {this.renderCells()}\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isWinner: Array(9).fill(false),\n      stepNumber: 0,\n      xIsNext: true,\n      reverseOrder: false,\n    };\n  }\n \n  handleClick(i) {\n    const history = this.props.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }    \n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n    this.props.addToHistory({\n      item: {\n        squares: squares,\n        coords: coords(i),\n      },\n      stepNumber: this.state.stepNumber,\n    });\n  }\n  \n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n\n  toggleOrder() {\n    this.setState({\n      reverseOrder: !this.state.reverseOrder,\n    });\n  }\n  \n  render() {\n    const history = this.props.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        `Go to move #${move} (${step.coords})` :\n        'Go to game start';\n      return (\n        <li key={move} className={move === this.state.stepNumber ? 'active' : ''}>\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n    if (this.state.reverseOrder) {\n      moves.reverse();\n    }\n    \n    let status;\n    const isWinner = this.state.isWinner.slice(0);\n    if (winner) {\n      status = 'Winner: ' + current.squares[winner[0]];\n      winner.forEach((el) => {\n        isWinner[el] = true;\n      });\n    } else if (!current.squares.includes(null)) {\n      status = 'Draw';\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n    \n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            isWinner={isWinner}\n            onClick={(i) => this.handleClick(i)}      \n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <button onClick={() => this.toggleOrder()}>Toggle order</button>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  (state) => state,\n  { addToHistory },\n)(Game);","import { ADD_TO_HISTORY } from \"./actionTypes\";\n\nexport const addToHistory = payload => ({\n  type: ADD_TO_HISTORY,\n  payload,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport Game from './game';\nimport './index.scss';\n\nReactDOM.render(\n  <Provider store={store}>\n    <Game />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}